
import java.awt.Color;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.temporal.ChronoUnit;
import javax.swing.JDialog;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author user
 */
public class CreateEvent extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(CreateEvent.class.getName());
    private Home home;
    private String username;
    private String gmail ;
    private String password;
    /**
     * Creates new form CreateEvent
     */
    public CreateEvent(Home home, String Gmail, String Username, String Password) {
        this.username = Username;
        this.gmail   = Gmail ;
        this.password = Password;
        this.home = home;
        this.setLocationRelativeTo(null);
        initComponents();
        
        setPlaceholder(DateESD, "DD");
        setPlaceholder(DateESM, "MM");
        setPlaceholder(DateESY, "YYYY");
        
        setNumberLimit(DateESD, 2);
        setNumberLimit(DateESM, 2);
        setNumberLimit(DateESY, 4);
        
        setPlaceholder(DateEED, "DD");
        setPlaceholder(DateEEM, "MM");
        setPlaceholder(DateEEY, "YYYY");
        
        setNumberLimit(DateEED, 2);
        setNumberLimit(DateEEM, 2);
        setNumberLimit(DateEEY, 4);
        
        setPlaceholder(TimeSH, "00");
        setPlaceholder(TimeSM, "00");
        setPlaceholder(TimeEH, "00");
        setPlaceholder(TimeEM, "00");
        
        setNumberLimit(TimeSH, 2);
        setNumberLimit(TimeSM, 2);
        setNumberLimit(TimeEH, 2);
        setNumberLimit(TimeEM, 2);
        
        addZeroPadding(DateESD, 2);
        addZeroPadding(DateEED, 2);

        addZeroPadding(DateESM, 2);
        addZeroPadding(DateEEM, 2);

        addZeroPadding(DateESY, 4);
        addZeroPadding(DateEEY, 4);

        addZeroPadding(TimeSH, 2);
        addZeroPadding(TimeSM, 2);
        addZeroPadding(TimeEH, 2);
        addZeroPadding(TimeEM, 2);
        
        setPlaceholder(AlarmN, "00");
        setNumberLimit(AlarmN, 2);
        
        //AlarmT.setToolTipText("M/H/D");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        CONFIRM = new javax.swing.JLabel();
        BACK = new javax.swing.JLabel();
        Event = new javax.swing.JLabel();
        DateS = new javax.swing.JLabel();
        Topic = new javax.swing.JLabel();
        TopicE = new javax.swing.JTextField();
        NotiTopicE = new javax.swing.JLabel();
        TimeSH = new javax.swing.JTextField();
        DateESD = new javax.swing.JTextField();
        TimeEH = new javax.swing.JTextField();
        DateESM = new javax.swing.JTextField();
        DateESY = new javax.swing.JTextField();
        TimeSM = new javax.swing.JTextField();
        TimeEM = new javax.swing.JTextField();
        DateEEM = new javax.swing.JTextField();
        DateEEY = new javax.swing.JTextField();
        DateEED = new javax.swing.JTextField();
        DateE = new javax.swing.JLabel();
        TimeS = new javax.swing.JLabel();
        TimeE = new javax.swing.JLabel();
        NotiDateES = new javax.swing.JLabel();
        NotiTimeS = new javax.swing.JLabel();
        NotiDateEE = new javax.swing.JLabel();
        NotiTimeE = new javax.swing.JLabel();
        Alarm = new javax.swing.JLabel();
        AlarmN = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        ContentE = new javax.swing.JTextArea();
        AlarmT = new javax.swing.JComboBox<>();
        NotiAlarm = new javax.swing.JLabel();
        Alarm1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(252, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 204));

        CONFIRM.setFont(new java.awt.Font("Leelawadee", 1, 12)); // NOI18N
        CONFIRM.setForeground(new java.awt.Color(0, 153, 51));
        CONFIRM.setText("CONFIRM");
        CONFIRM.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CONFIRMMouseClicked(evt);
            }
        });

        BACK.setBackground(new java.awt.Color(255, 0, 0));
        BACK.setFont(new java.awt.Font("Leelawadee", 1, 12)); // NOI18N
        BACK.setForeground(new java.awt.Color(255, 0, 0));
        BACK.setText("BACK");
        BACK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BACKMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(BACK)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 287, Short.MAX_VALUE)
                .addComponent(CONFIRM)
                .addGap(14, 14, 14))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CONFIRM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BACK, javax.swing.GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE))
                .addContainerGap())
        );

        Event.setFont(new java.awt.Font("STHupo", 0, 65)); // NOI18N
        Event.setForeground(new java.awt.Color(0, 102, 255));
        Event.setText("EVENT");

        DateS.setFont(new java.awt.Font("Leelawadee", 0, 12)); // NOI18N
        DateS.setText("DATE START");

        Topic.setFont(new java.awt.Font("Leelawadee", 0, 14)); // NOI18N
        Topic.setText("TOPIC");

        TopicE.setBackground(new java.awt.Color(255, 255, 243));
        TopicE.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
        TopicE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TopicEActionPerformed(evt);
            }
        });

        NotiTopicE.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        NotiTopicE.setForeground(new java.awt.Color(255, 0, 0));

        TimeSH.setBackground(new java.awt.Color(255, 255, 243));
        TimeSH.setForeground(new java.awt.Color(0, 51, 204));
        TimeSH.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TimeSH.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(79, 124, 79)));
        TimeSH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimeSHActionPerformed(evt);
            }
        });

        DateESD.setBackground(new java.awt.Color(255, 255, 243));
        DateESD.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        DateESD.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 0)));
        DateESD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DateESDActionPerformed(evt);
            }
        });

        TimeEH.setBackground(new java.awt.Color(255, 255, 243));
        TimeEH.setForeground(new java.awt.Color(0, 51, 204));
        TimeEH.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TimeEH.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 255)));
        TimeEH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimeEHActionPerformed(evt);
            }
        });

        DateESM.setBackground(new java.awt.Color(255, 255, 243));
        DateESM.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        DateESM.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 0)));
        DateESM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DateESMActionPerformed(evt);
            }
        });

        DateESY.setBackground(new java.awt.Color(255, 255, 243));
        DateESY.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        DateESY.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 0)));
        DateESY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DateESYActionPerformed(evt);
            }
        });

        TimeSM.setBackground(new java.awt.Color(255, 255, 243));
        TimeSM.setForeground(new java.awt.Color(0, 51, 204));
        TimeSM.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TimeSM.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(79, 124, 79)));
        TimeSM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimeSMActionPerformed(evt);
            }
        });

        TimeEM.setBackground(new java.awt.Color(255, 255, 243));
        TimeEM.setForeground(new java.awt.Color(0, 51, 204));
        TimeEM.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        TimeEM.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 255)));
        TimeEM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TimeEMActionPerformed(evt);
            }
        });

        DateEEM.setBackground(new java.awt.Color(255, 255, 243));
        DateEEM.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        DateEEM.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 0)));
        DateEEM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DateEEMActionPerformed(evt);
            }
        });

        DateEEY.setBackground(new java.awt.Color(255, 255, 243));
        DateEEY.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        DateEEY.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 0)));
        DateEEY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DateEEYActionPerformed(evt);
            }
        });

        DateEED.setBackground(new java.awt.Color(255, 255, 243));
        DateEED.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        DateEED.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 0)));
        DateEED.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DateEEDActionPerformed(evt);
            }
        });

        DateE.setFont(new java.awt.Font("Leelawadee", 0, 12)); // NOI18N
        DateE.setText("DATE END");

        TimeS.setFont(new java.awt.Font("Leelawadee", 0, 12)); // NOI18N
        TimeS.setText("TIME START");

        TimeE.setFont(new java.awt.Font("Leelawadee", 0, 12)); // NOI18N
        TimeE.setText("TIME END");

        NotiDateES.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        NotiDateES.setForeground(new java.awt.Color(255, 0, 0));

        NotiTimeS.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        NotiTimeS.setForeground(new java.awt.Color(255, 0, 0));

        NotiDateEE.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        NotiDateEE.setForeground(new java.awt.Color(255, 0, 0));

        NotiTimeE.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        NotiTimeE.setForeground(new java.awt.Color(255, 0, 0));

        Alarm.setFont(new java.awt.Font("Leelawadee", 0, 12)); // NOI18N
        Alarm.setText("ALARM");

        AlarmN.setBackground(new java.awt.Color(255, 255, 243));
        AlarmN.setForeground(new java.awt.Color(0, 51, 204));
        AlarmN.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        AlarmN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 255)));
        AlarmN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlarmNActionPerformed(evt);
            }
        });

        ContentE.setBackground(new java.awt.Color(255, 255, 243));
        ContentE.setColumns(20);
        ContentE.setRows(5);
        ContentE.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 51, 255)));
        jScrollPane1.setViewportView(ContentE);

        AlarmT.setBackground(new java.awt.Color(255, 255, 51));
        AlarmT.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        AlarmT.setForeground(new java.awt.Color(255, 102, 0));
        AlarmT.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Minute", "Hour", "Day" }));
        AlarmT.setBorder(javax.swing.BorderFactory.createCompoundBorder());

        NotiAlarm.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        NotiAlarm.setForeground(new java.awt.Color(255, 0, 0));
        NotiAlarm.setText("jLabel1");

        Alarm1.setFont(new java.awt.Font("Leelawadee", 0, 12)); // NOI18N
        Alarm1.setText("BEFORE");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NotiTopicE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(TopicE)
                            .addComponent(Topic)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(DateS, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(DateESD, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DateESM, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DateESY, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(TimeS)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TimeSH, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TimeSM, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(NotiDateES, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(NotiTimeS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(NotiDateEE, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(NotiTimeE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(DateE, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DateEED, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DateEEM, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(DateEEY, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(TimeE)
                                .addGap(17, 17, 17)
                                .addComponent(TimeEH, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TimeEM, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1)
                            .addComponent(NotiAlarm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Alarm)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AlarmN, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(AlarmT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Alarm1)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Event)
                .addGap(117, 117, 117))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Event, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(Topic)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TopicE, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(NotiTopicE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(TimeSH, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(TimeSM, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(TimeS, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(DateESD, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(DateS, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(DateESM, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(DateESY, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NotiDateES)
                    .addComponent(NotiTimeS))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DateE, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DateEED, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DateEEM, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DateEEY, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TimeEH, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TimeEM, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TimeE, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NotiDateEE)
                    .addComponent(NotiTimeE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Alarm, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AlarmN, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AlarmT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Alarm1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(NotiAlarm)
                .addGap(4, 4, 4)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(271, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BACKMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BACKMouseClicked
        // TODO add your handling code here:
        this.dispose();
        /*if (home != null) {
        home.setVisible(true);
        }*/
        Home home = new Home(gmail,username,password);
        home.setVisible(true);
        home.pack();
        home.setLocationRelativeTo(null); //
        home.setDefaultCloseOperation(JDialog.EXIT_ON_CLOSE);
    }//GEN-LAST:event_BACKMouseClicked

    private void TopicEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TopicEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TopicEActionPerformed

    private void TimeSHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TimeSHActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TimeSHActionPerformed

    private void DateESDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateESDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DateESDActionPerformed

    private void TimeEHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TimeEHActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TimeEHActionPerformed

    private void CONFIRMMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CONFIRMMouseClicked
        // TODO add your handling code here:
        String topicE = TopicE.getText().trim();
        String contentE = ContentE.getText();
        
        String dateESD = DateESD.getText().trim();
        String dateESM = DateESM.getText().trim();
        String dateESY = DateESY.getText().trim();
        
        String dateEED = DateEED.getText().trim();
        String dateEEM = DateEEM.getText().trim();
        String dateEEY = DateEEY.getText().trim();
        
        String timeSH = TimeSH.getText().trim();
        String timeSM = TimeSM.getText().trim();
        String timeEH = TimeEH.getText().trim();
        String timeEM = TimeEM.getText().trim();
        
        String alarmN = AlarmN.getText().trim();
        String alarmT = (String) AlarmT.getSelectedItem();
        
        NotiTopicE.setText("");
        NotiDateES.setText("");
        NotiDateEE.setText("");
        NotiTimeS.setText("");
        NotiTimeE.setText("");
    
        TopicE.setBorder(new LineBorder(Color.GRAY, 1));
        
        DateESD.setBorder(new LineBorder(Color.GRAY, 1));
        DateESM.setBorder(new LineBorder(Color.GRAY, 1));
        DateESY.setBorder(new LineBorder(Color.GRAY, 1));
        
        TimeSH.setBorder(new LineBorder(Color.GRAY, 1));
        TimeSM.setBorder(new LineBorder(Color.GRAY, 1));
        TimeEH.setBorder(new LineBorder(Color.GRAY, 1));
        TimeEM.setBorder(new LineBorder(Color.GRAY, 1));
    
        boolean hasError = false;

        if (topicE.isEmpty()) {
            NotiTopicE.setText("Please enter a topic.");
            TopicE.setBorder(new LineBorder(Color.RED, 1));
            hasError = true;
        }

        boolean dateSEmpty = dateESD.equals("DD") || dateESM.equals("MM") || dateESY.equals("YYYY");
        boolean dateEEmpty = dateEED.equals("DD") || dateEEM.equals("MM") || dateEEY.equals("YYYY");

        LocalDate startDate = null;
        if (dateSEmpty) {
            NotiDateES.setText("Please enter the start date.");
            DateESD.setBorder(new LineBorder(Color.RED, 1));
            DateESM.setBorder(new LineBorder(Color.RED, 1));
            DateESY.setBorder(new LineBorder(Color.RED, 1));
            hasError = true;
        } else {
            try {
                 int day = Integer.parseInt(dateESD);
                 int month = Integer.parseInt(dateESM);
                 int year = Integer.parseInt(dateESY);
                 
                 startDate = java.time.LocalDate.of(year, month, day);
                 
            } catch (Exception e) {
                     NotiDateES.setText("Invalid start date.");
                     DateESD.setBorder(new LineBorder(Color.RED, 1));
                     DateESM.setBorder(new LineBorder(Color.RED, 1));
                     DateESY.setBorder(new LineBorder(Color.RED, 1));
                     hasError = true;
            }
        }
        
        LocalDate endDate = null;
        if (dateEEmpty) {
            NotiDateEE.setText("Please put the end date.");
            DateEED.setBorder(new LineBorder(Color.RED, 1));
            DateEEM.setBorder(new LineBorder(Color.RED, 1));
            DateEEY.setBorder(new LineBorder(Color.RED, 1));
            hasError = true;
        } else {
            try {
                 int day = Integer.parseInt(dateEED);
                 int month = Integer.parseInt(dateEEM);
                 int year = Integer.parseInt(dateEEY);
                 
                 endDate = java.time.LocalDate.of(year, month, day);
                 
            } catch (Exception e) {
                     NotiDateEE.setText("Invalid end date.");
                     DateEED.setBorder(new LineBorder(Color.RED, 1));
                     DateEEM.setBorder(new LineBorder(Color.RED, 1));
                     DateEEY.setBorder(new LineBorder(Color.RED, 1));
                     hasError = true;
            }
        }
        
        if (timeSH.isEmpty() || timeSM.isEmpty()) {
            timeSH = "00";
            timeSM = "00";
        }
        if (timeEH.isEmpty() || timeEM.isEmpty()) {
            timeEH = "00";
            timeEM = "00";
        }
        
        LocalTime startTime = null;
        LocalTime endTime = null;
        
        try {
             int hourStart = Integer.parseInt(timeSH);
             int minuteStart = Integer.parseInt(timeSM);
             int hourEnd = Integer.parseInt(timeEH);
             int minuteEnd = Integer.parseInt(timeEM);

             startTime = LocalTime.of(hourStart, minuteStart);
             endTime = LocalTime.of(hourEnd, minuteEnd);
        } catch (Exception e) {
                 NotiTimeS.setText("Invalid time.");
                 NotiTimeE.setText("Invalid time.");
                 TimeSH.setBorder(new LineBorder(Color.RED, 1));
                 TimeSM.setBorder(new LineBorder(Color.RED, 1));
                 TimeEH.setBorder(new LineBorder(Color.RED, 1));
                 TimeEM.setBorder(new LineBorder(Color.RED, 1));
                 hasError = true;
        } 

        if (startDate != null && endDate != null) {
            if (endDate.isBefore(startDate)) {
                NotiDateEE.setText("End date not available.");
                DateEED.setBorder(new LineBorder(Color.RED, 1));
                DateEEM.setBorder(new LineBorder(Color.RED, 1));
                DateEEY.setBorder(new LineBorder(Color.RED, 1));
                hasError = true;
            } else if (endDate.isEqual(startDate) && endTime != null && startTime != null && endTime.isBefore(startTime)) {
                       //NotiTimeE.setText("End time not available.");
                       TimeEH.setBorder(new LineBorder(Color.RED, 1));
                       TimeEM.setBorder(new LineBorder(Color.RED, 1));
                       hasError = true;
            }
        }
        
        if (alarmN.isEmpty() || alarmN.equals("00")) {
            NotiAlarm.setText("Please enter alarm value.");
            AlarmN.setBorder(new LineBorder(Color.RED, 1));
            hasError = true;
        } else {
            try {
                 int alarmValue = Integer.parseInt(alarmN);
                 if (alarmValue < 0 || alarmValue > 99) {
                 NotiAlarm.setText("Alarm must be between 0-99.");
                 AlarmN.setBorder(new LineBorder(Color.RED, 1));
                 hasError = true;
                 }
            } catch (NumberFormatException e) {
                     NotiAlarm.setText("Invalid number.");
                     AlarmN.setBorder(new LineBorder(Color.RED, 1));
                     hasError = true;
            }
        }

        if (alarmT == null || alarmT.isEmpty()) {
            NotiAlarm.setText("Please select unit.");
            hasError = true;
        }

        if (hasError) {
            return;
        }

        String filePath = "Data/event.csv";
            try (FileWriter fw = new FileWriter(filePath, true); 
                 BufferedWriter bw = new BufferedWriter(fw);
                 PrintWriter out = new PrintWriter(bw))
                {
                out.println(topicE + "," +
                            dateESD + "/" + dateESM + "/" + dateESY + "-" +
                            dateEED + "/" + dateEEM + "/" + dateEEY + "," +
                            timeSH + ":" + timeSM + "-" + timeEH + ":" + timeEM + "," +
                            alarmN + ":" + alarmT + "," + "\n" +
                            contentE + "\n");
                
                LocalDate today = LocalDate.now();
                long daysLeft = ChronoUnit.DAYS.between(today, startDate); 

                if (daysLeft < 0) {
                    daysLeft = 0; 
                }
                
                this.dispose();
                if (home != null) {
                    home.refreshDayLeft();
                    home.revalidate();
                    home.repaint();
                 }
                home.setVisible(true);
                
                } catch (IOException ex) {
                       ex.printStackTrace();
                }
        
    }//GEN-LAST:event_CONFIRMMouseClicked

    private void DateESMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateESMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DateESMActionPerformed

    private void DateESYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateESYActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DateESYActionPerformed

    private void TimeSMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TimeSMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TimeSMActionPerformed

    private void TimeEMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TimeEMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TimeEMActionPerformed

    private void DateEEMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateEEMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DateEEMActionPerformed

    private void DateEEYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateEEYActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DateEEYActionPerformed

    private void DateEEDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateEEDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DateEEDActionPerformed

    private void AlarmNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlarmNActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AlarmNActionPerformed

    private void setPlaceholder(javax.swing.JTextField field, String placeholder) {
        field.setText(placeholder);
        field.setForeground(Color.GRAY);

        field.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusGained(java.awt.event.FocusEvent e) {
            if (field.getText().equals(placeholder)) {
                field.setText("");
                field.setForeground(Color.BLACK);
               }
            }

            @Override
            public void focusLost(java.awt.event.FocusEvent e) {
            if (field.getText().isEmpty()) {
                field.setText(placeholder);
                field.setForeground(Color.GRAY);
               }
            }
        });
    }
    
    private void addZeroPadding(JTextField field, int expectedLength) {
    field.addFocusListener(new java.awt.event.FocusAdapter() {
        @Override
        public void focusLost(java.awt.event.FocusEvent e) {
            String text = field.getText().trim();
            if (!text.isEmpty() && text.matches("\\d{1," + expectedLength + "}")) {
                while (text.length() < expectedLength) {
                    text = "0" + text;
                }
                field.setText(text);
            }
        }
    });
}
    
    private void setNumberLimit(javax.swing.JTextField field, int limit) {
        field.addKeyListener(new java.awt.event.KeyAdapter() {
        @Override
            public void keyTyped(java.awt.event.KeyEvent e) {
            char c = e.getKeyChar();
            if (!Character.isDigit(c) || field.getText().length() >= limit) {
                e.consume();
               }
            }
        });
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
             Home home = new Home("Gmail", "Username", "Password");
             new CreateEvent(home, "Gmail", "Username", "Password").setVisible(true);
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Alarm;
    private javax.swing.JLabel Alarm1;
    private javax.swing.JTextField AlarmN;
    private javax.swing.JComboBox<String> AlarmT;
    private javax.swing.JLabel BACK;
    private javax.swing.JLabel CONFIRM;
    private javax.swing.JTextArea ContentE;
    private javax.swing.JLabel DateE;
    private javax.swing.JTextField DateEED;
    private javax.swing.JTextField DateEEM;
    private javax.swing.JTextField DateEEY;
    private javax.swing.JTextField DateESD;
    private javax.swing.JTextField DateESM;
    private javax.swing.JTextField DateESY;
    private javax.swing.JLabel DateS;
    private javax.swing.JLabel Event;
    private javax.swing.JLabel NotiAlarm;
    private javax.swing.JLabel NotiDateEE;
    private javax.swing.JLabel NotiDateES;
    private javax.swing.JLabel NotiTimeE;
    private javax.swing.JLabel NotiTimeS;
    private javax.swing.JLabel NotiTopicE;
    private javax.swing.JLabel TimeE;
    private javax.swing.JTextField TimeEH;
    private javax.swing.JTextField TimeEM;
    private javax.swing.JLabel TimeS;
    private javax.swing.JTextField TimeSH;
    private javax.swing.JTextField TimeSM;
    private javax.swing.JLabel Topic;
    private javax.swing.JTextField TopicE;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
